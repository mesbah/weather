<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather API Documentation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            line-height: 1.6;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px 0;
            margin-bottom: 30px;
            border-radius: 10px;
        }

        .header h1 {
            text-align: center;
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .header p {
            text-align: center;
            font-size: 1.2em;
            opacity: 0.9;
        }

        .section {
            background: white;
            border-radius: 10px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .section h2 {
            color: #667eea;
            margin-bottom: 20px;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }

        .section h3 {
            color: #333;
            margin: 25px 0 15px 0;
        }

        .endpoint {
            background: #f8f9fa;
            border-left: 4px solid #667eea;
            padding: 15px;
            margin: 15px 0;
            border-radius: 0 5px 5px 0;
        }

        .method {
            background: #667eea;
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            font-weight: bold;
            display: inline-block;
            margin-right: 10px;
        }

        .url {
            font-family: 'Courier New', monospace;
            background: #e9ecef;
            padding: 5px 10px;
            border-radius: 3px;
            color: #495057;
        }

        .code-block {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
        }

        .response-example {
            background: #f0fff4;
            border: 1px solid #c6f6d5;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }

        .error-example {
            background: #fed7d7;
            border: 1px solid #feb2b2;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }

        .table th, .table td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }

        .table th {
            background: #667eea;
            color: white;
        }

        .table tr:nth-child(even) {
            background: #f8f9fa;
        }

        .example-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .example-card {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
        }

        .example-card h4 {
            color: #667eea;
            margin-bottom: 10px;
        }

        .test-form {
            background: #e3f2fd;
            border: 1px solid #90caf9;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }

        .test-form input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin: 10px 0;
        }

        .test-form button {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }

        .test-form button:hover {
            background: #5a67d8;
        }

        .result-area {
            margin-top: 15px;
            padding: 15px;
            border-radius: 5px;
            display: none;
        }

        .success-result {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .error-result {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .nav-links {
            text-align: center;
            margin-bottom: 20px;
        }

        .nav-links a {
            display: inline-block;
            margin: 0 10px;
            padding: 10px 20px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background 0.3s;
        }

        .nav-links a:hover {
            background: #5a67d8;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="nav-links">
            <a href="/">üå§Ô∏è Weather App</a>
            <a href="/docs">üìö API Docs</a>
        </div>

        <div class="header">
            <h1>Weather API Documentation</h1>
            <p>Complete guide to using the Weather API with postal code extraction</p>
        </div>

        <div class="section">
            <h2>Overview</h2>
            <p>The Weather API automatically extracts postal codes from addresses and returns current weather information. It supports both US ZIP codes and Canadian postal codes.</p>
            
            <div class="endpoint">
                <span class="method">GET</span>
                <span class="url">/api/weather/current</span>
            </div>
        </div>

        <div class="section">
            <h2>Parameters</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Type</th>
                        <th>Required</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>location</td>
                        <td>string</td>
                        <td>Yes</td>
                        <td>Address or postal code</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="section">
            <h2>Supported Formats</h2>
            
            <h3>US ZIP Codes</h3>
            <ul>
                <li><strong>5-digit format:</strong> 12345</li>
                <li><strong>ZIP+4 format:</strong> 12345-6789</li>
            </ul>

            <h3>Canadian Postal Codes</h3>
            <ul>
                <li><strong>Standard format:</strong> A1A 1A1</li>
                <li><strong>Compact format:</strong> A1A1A1</li>
                <li><strong>With hyphen:</strong> A1A-1A1</li>
            </ul>
        </div>

        <div class="section">
            <h2>Response Format</h2>
            
            <h3>Success Response (200)</h3>
            <div class="code-block">
{
  "status": "success",
  "data": {
    "weather": {
      "last_updated": "2024-01-15 12:00",
      "last_updated_epoch": 1705312800,
      "temp_c": 20.5,
      "temp_f": 68.9,
      "feelslike_c": 22.0,
      "feelslike_f": 71.6,
      "windchill_c": 21.0,
      "windchill_f": 69.8,
      "maxtemp_c": 25.0,
      "maxtemp_f": 77.0,
      "mintemp_c": 15.0,
      "mintemp_f": 59.0
    },
    "location": {
      "postal_code": "10001",
      "country": "US"
    }
  }
}
            </div>

            <h3>Error Response (400/500)</h3>
            <div class="code-block">
{
  "status": "error",
  "error": "Error message description"
}
            </div>
        </div>

        <div class="section">
            <h2>Usage Examples</h2>
            
            <div class="example-grid">
                <div class="example-card">
                    <h4>US ZIP Codes</h4>
                    <p><strong>5-digit ZIP:</strong></p>
                    <code>GET /api/weather/current?location=10001</code>
                    
                    <p><strong>ZIP+4 format:</strong></p>
                    <code>GET /api/weather/current?location=90210-1234</code>
                    
                    <p><strong>Full address:</strong></p>
                    <code>GET /api/weather/current?location=123%20Main%20St,%20NY%2010001</code>
                </div>

                <div class="example-card">
                    <h4>Canadian Postal Codes</h4>
                    <p><strong>Standard format:</strong></p>
                    <code>GET /api/weather/current?location=A1A%201A1</code>
                    
                    <p><strong>Compact format:</strong></p>
                    <code>GET /api/weather/current?location=A1A1A1</code>
                    
                    <p><strong>Full address:</strong></p>
                    <code>GET /api/weather/current?location=123%20Main%20St,%20Toronto,%20ON%20A1A%201A1</code>
                </div>
            </div>
        </div>

        <div class="section">
            <h2>Error Codes</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>HTTP Status</th>
                        <th>Error Message</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>400</td>
                        <td>Location parameter is required</td>
                        <td>Missing location parameter</td>
                    </tr>
                    <tr>
                        <td>400</td>
                        <td>Invalid postal code format</td>
                        <td>Invalid postal code format</td>
                    </tr>
                    <tr>
                        <td>400</td>
                        <td>No valid postal code found in address</td>
                        <td>No postal code found in address</td>
                    </tr>
                    <tr>
                        <td>500</td>
                        <td>Failed to fetch weather data</td>
                        <td>Weather API error or network issue</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="section">
            <h2>Test the API</h2>
            <div class="test-form">
                <h3>Try it out:</h3>
                <input type="text" id="testLocation" placeholder="Enter a location (e.g., 10001 or 123 Main St, NY 10001)">
                <button onclick="testAPI()">Test API</button>
                <div id="testResult" class="result-area"></div>
            </div>
        </div>

        <div class="section">
            <h2>Features</h2>
            <ul>
                <li><strong>Automatic Postal Code Extraction:</strong> Extracts postal codes from full addresses</li>
                <li><strong>Multi-format Support:</strong> Supports various US and Canadian postal code formats</li>
                <li><strong>Caching:</strong> 30-minute cache to improve performance and reduce API calls</li>
                <li><strong>Error Handling:</strong> Comprehensive error handling with descriptive messages</li>
                <li><strong>Rate Limiting:</strong> Respects WeatherAPI.com rate limits</li>
            </ul>
        </div>

        <div class="section">
            <h2>Rate Limits</h2>
            <p>The API respects WeatherAPI.com rate limits:</p>
            <ul>
                <li><strong>Free tier:</strong> 1,000,000 calls per month</li>
                <li><strong>Paid tiers:</strong> Higher limits based on plan</li>
            </ul>
            <p>The 30-minute cache helps stay within these limits.</p>
        </div>
    </div>

    <script>
        async function testAPI() {
            const location = document.getElementById('testLocation').value.trim();
            const resultDiv = document.getElementById('testResult');
            
            if (!location) {
                showTestResult('Please enter a location', 'error');
                return;
            }
            
            try {
                const response = await fetch(`/api/weather/current?location=${encodeURIComponent(location)}`);
                const data = await response.json();
                
                if (response.ok) {
                    showTestResult(JSON.stringify(data, null, 2), 'success');
                } else {
                    showTestResult(JSON.stringify(data, null, 2), 'error');
                }
            } catch (error) {
                showTestResult('Network error. Please try again.', 'error');
            }
        }
        
        function showTestResult(message, type) {
            const resultDiv = document.getElementById('testResult');
            resultDiv.className = `result-area ${type === 'success' ? 'success-result' : 'error-result'}`;
            resultDiv.style.display = 'block';
            resultDiv.innerHTML = `<pre>${message}</pre>`;
        }
        
        // Allow Enter key to test
        document.getElementById('testLocation').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                testAPI();
            }
        });
    </script>
</body>
</html> 